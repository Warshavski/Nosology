/**
 * material-design-lite - Material Design Components in CSS, JS and HTML
 * @version v1.0.5
 * @license Apache-2.0
 * @copyright 2015 Google, Inc.
 * @link https://github.com/google/material-design-lite
 */
!function () {"use strict"; function p(a, b) { if (a) { if (b.element_.classList.contains(b.CssClasses_.MDL_JS_RIPPLE_EFFECT)) { var c = document.createElement("span"); c.classList.add(b.CssClasses_.MDL_RIPPLE_CONTAINER), c.classList.add(b.CssClasses_.MDL_JS_RIPPLE_EFFECT); var d = document.createElement("span"); d.classList.add(b.CssClasses_.MDL_RIPPLE), c.appendChild(d), a.appendChild(c) } a.addEventListener("click", function (c) { c.preventDefault(); var d = a.href.split("#")[1], e = b.element_.querySelector("#" + d); b.resetTabState_(), b.resetPanelState_(), a.classList.add(b.CssClasses_.ACTIVE_CLASS), e.classList.add(b.CssClasses_.ACTIVE_CLASS) }) } } function t(a, b, c, d) { if (a) { if (d.tabBar_.classList.contains(d.CssClasses_.JS_RIPPLE_EFFECT)) { var e = document.createElement("span"); e.classList.add(d.CssClasses_.RIPPLE_CONTAINER), e.classList.add(d.CssClasses_.JS_RIPPLE_EFFECT); var f = document.createElement("span"); f.classList.add(d.CssClasses_.RIPPLE), e.appendChild(f), a.appendChild(e) } a.addEventListener("click", function (e) { e.preventDefault(); var f = a.href.split("#")[1], g = d.content_.querySelector("#" + f); d.resetTabState_(b), d.resetPanelState_(c), a.classList.add(d.CssClasses_.IS_ACTIVE), g.classList.add(d.CssClasses_.IS_ACTIVE) }) } } var a = { upgradeDom: function () { }, upgradeElement: function () { }, upgradeElements: function () { }, upgradeAllRegistered: function () { }, registerUpgradedCallback: function () { }, register: function () { }, downgradeElements: function () { } }; a = function () { function e(b, c) { for (var d = 0; d < a.length; d++) if (a[d].className === b) return "undefined" !== typeof c && (a[d] = c), a[d]; return !1 } function f(a) { var b = a.getAttribute("data-upgraded"); return null === b ? [""] : b.split(",") } function g(a, b) { var c = f(a); return -1 !== c.indexOf(b) } function h(b, c) { if ("undefined" === typeof b && "undefined" === typeof c) for (var d = 0; d < a.length; d++) h(a[d].className, a[d].cssClass); else { var f = b; if ("undefined" === typeof c) { var g = e(f); g && (c = g.cssClass) } for (var j = document.querySelectorAll("." + c), k = 0; k < j.length; k++) i(j[k], f) } } function i(c, h) { if (!("object" === typeof c && c instanceof Element)) throw new Error("Invalid argument provided to upgrade MDL element."); var i = f(c), j = []; if (h) g(c, h) || j.push(e(h)); else { var k = c.classList; a.forEach(function (a) { k.contains(a.cssClass) && -1 === j.indexOf(a) && !g(c, a.className) && j.push(a) }) } for (var n, l = 0, m = j.length; l < m; l++) { if (n = j[l], !n) throw new Error("Unable to find a registered component for the given class."); i.push(n.className), c.setAttribute("data-upgraded", i.join(",")); var o = new n.classConstructor(c); o[d] = n, b.push(o); for (var p = 0, q = n.callbacks.length; p < q; p++) n.callbacks[p](c); n.widget && (c[n.className] = o); var r = document.createEvent("Events"); r.initEvent("mdl-componentupgraded", !0, !0), c.dispatchEvent(r) } } function j(a) { Array.isArray(a) || (a = "function" === typeof a.item ? Array.prototype.slice.call(a) : [a]); for (var d, b = 0, c = a.length; b < c; b++) d = a[b], d instanceof HTMLElement && (i(d), d.children.length > 0 && j(d.children)) } function k(b) { var c = "undefined" === typeof b.widget && "undefined" === typeof b.widget, f = !0; c || (f = b.widget || b.widget); var g = { classConstructor: b.constructor || b.constructor, className: b.classAsString || b.classAsString, cssClass: b.cssClass || b.cssClass, widget: f, callbacks: [] }; if (a.forEach(function (a) { if (a.cssClass === g.cssClass) throw new Error("The provided cssClass has already been registered: " + a.cssClass); if (a.className === g.className) throw new Error("The provided className has already been registered") }), b.constructor.prototype.hasOwnProperty(d)) throw new Error("MDL component classes must not have " + d + " defined as a property."); var h = e(b.classAsString, g); h || a.push(g) } function l(a, b) { var c = e(a); c && c.callbacks.push(b) } function m() { for (var b = 0; b < a.length; b++) h(a[b].className) } function n(a) { for (var c = 0; c < b.length; c++) { var d = b[c]; if (d.element_ === a) return d } } function o(a) { if (a && a[d].classConstructor.prototype.hasOwnProperty(c)) { a[c](); var e = b.indexOf(a); b.splice(e, 1); var f = a.element_.getAttribute("data-upgraded").split(","), g = f.indexOf(a[d].classAsString); f.splice(g, 1), a.element_.setAttribute("data-upgraded", f.join(",")); var h = document.createEvent("Events"); h.initEvent("mdl-componentdowngraded", !0, !0), a.element_.dispatchEvent(h) } } function p(a) { var b = function (a) { o(n(a)) }; if (a instanceof Array || a instanceof NodeList) for (var c = 0; c < a.length; c++) b(a[c]); else { if (!(a instanceof Node)) throw new Error("Invalid argument provided to downgrade MDL nodes."); b(a) } } var a = [], b = [], c = "mdlDowngrade_", d = "mdlComponentConfigInternal_"; return { upgradeDom: h, upgradeElement: i, upgradeElements: j, upgradeAllRegistered: m, registerUpgradedCallback: l, register: k, downgradeElements: p } }(), a.ComponentConfigPublic, a.ComponentConfig, a.Component, a.upgradeDom = a.upgradeDom, a.upgradeElement = a.upgradeElement, a.upgradeElements = a.upgradeElements, a.upgradeAllRegistered = a.upgradeAllRegistered, a.registerUpgradedCallback = a.registerUpgradedCallback, a.register = a.register, a.downgradeElements = a.downgradeElements, window.componentHandler = a, window.componentHandler = a, window.addEventListener("load", function () { "classList" in document.createElement("div") && "querySelector" in document && "addEventListener" in window && Array.prototype.forEach ? (document.documentElement.classList.add("mdl-js"), a.upgradeAllRegistered()) : (a.upgradeElement = function () { }, a.register = function () { }) }), Date.now || (Date.now = function () { return (new Date).getTime() }, Date.now = Date.now); for (var b = ["webkit", "moz"], c = 0; c < b.length && !window.requestAnimationFrame; ++c) { var d = b[c]; window.requestAnimationFrame = window[d + "RequestAnimationFrame"], window.cancelAnimationFrame = window[d + "CancelAnimationFrame"] || window[d + "CancelRequestAnimationFrame"], window.requestAnimationFrame = window.requestAnimationFrame, window.cancelAnimationFrame = window.cancelAnimationFrame } if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) { var e = 0; window.requestAnimationFrame = function (a) { var b = Date.now(), c = Math.max(e + 16, b); return setTimeout(function () { a(e = c) }, c - b) }, window.cancelAnimationFrame = clearTimeout, window.requestAnimationFrame = window.requestAnimationFrame, window.cancelAnimationFrame = window.cancelAnimationFrame } var f = function (a) { this.element_ = a, this.init() }; window.MaterialButton = f, f.prototype.Constant_ = {}, f.prototype.CssClasses_ = { RIPPLE_EFFECT: "mdl-js-ripple-effect", RIPPLE_CONTAINER: "mdl-button__ripple-container", RIPPLE: "mdl-ripple" }, f.prototype.blurHandler_ = function (a) { a && this.element_.blur() }, f.prototype.disable = function () { this.element_.disabled = !0 }, f.prototype.disable = f.prototype.disable, f.prototype.enable = function () { this.element_.disabled = !1 }, f.prototype.enable = f.prototype.enable, f.prototype.init = function () { if (this.element_) { if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) { var a = document.createElement("span"); a.classList.add(this.CssClasses_.RIPPLE_CONTAINER), this.rippleElement_ = document.createElement("span"), this.rippleElement_.classList.add(this.CssClasses_.RIPPLE), a.appendChild(this.rippleElement_), this.boundRippleBlurHandler = this.blurHandler_.bind(this), this.rippleElement_.addEventListener("mouseup", this.boundRippleBlurHandler), this.element_.appendChild(a) } this.boundButtonBlurHandler = this.blurHandler_.bind(this), this.element_.addEventListener("mouseup", this.boundButtonBlurHandler), this.element_.addEventListener("mouseleave", this.boundButtonBlurHandler) } }, f.prototype.mdlDowngrade_ = function () { this.rippleElement_ && this.rippleElement_.removeEventListener("mouseup", this.boundRippleBlurHandler), this.element_.removeEventListener("mouseup", this.boundButtonBlurHandler), this.element_.removeEventListener("mouseleave", this.boundButtonBlurHandler) }, a.register({ constructor: f, classAsString: "MaterialButton", cssClass: "mdl-js-button", widget: !0 }); var g = function (a) { this.element_ = a, this.init() }; window.MaterialCheckbox = g, g.prototype.Constant_ = { TINY_TIMEOUT: .001 }, g.prototype.CssClasses_ = { INPUT: "mdl-checkbox__input", BOX_OUTLINE: "mdl-checkbox__box-outline", FOCUS_HELPER: "mdl-checkbox__focus-helper", TICK_OUTLINE: "mdl-checkbox__tick-outline", RIPPLE_EFFECT: "mdl-js-ripple-effect", RIPPLE_IGNORE_EVENTS: "mdl-js-ripple-effect--ignore-events", RIPPLE_CONTAINER: "mdl-checkbox__ripple-container", RIPPLE_CENTER: "mdl-ripple--center", RIPPLE: "mdl-ripple", IS_FOCUSED: "is-focused", IS_DISABLED: "is-disabled", IS_CHECKED: "is-checked", IS_UPGRADED: "is-upgraded" }, g.prototype.onChange_ = function () { this.updateClasses_() }, g.prototype.onFocus_ = function () { this.element_.classList.add(this.CssClasses_.IS_FOCUSED) }, g.prototype.onBlur_ = function () { this.element_.classList.remove(this.CssClasses_.IS_FOCUSED) }, g.prototype.onMouseUp_ = function () { this.blur_() }, g.prototype.updateClasses_ = function () { this.checkDisabled(), this.checkToggleState() }, g.prototype.blur_ = function () { window.setTimeout(function () { this.inputElement_.blur() }.bind(this), this.Constant_.TINY_TIMEOUT) }, g.prototype.checkToggleState = function () { this.inputElement_.checked ? this.element_.classList.add(this.CssClasses_.IS_CHECKED) : this.element_.classList.remove(this.CssClasses_.IS_CHECKED) }, g.prototype.checkToggleState = g.prototype.checkToggleState, g.prototype.checkDisabled = function () { this.inputElement_.disabled ? this.element_.classList.add(this.CssClasses_.IS_DISABLED) : this.element_.classList.remove(this.CssClasses_.IS_DISABLED) }, g.prototype.checkDisabled = g.prototype.checkDisabled, g.prototype.disable = function () { this.inputElement_.disabled = !0, this.updateClasses_() }, g.prototype.disable = g.prototype.disable, g.prototype.enable = function () { this.inputElement_.disabled = !1, this.updateClasses_() }, g.prototype.enable = g.prototype.enable, g.prototype.check = function () { this.inputElement_.checked = !0, this.updateClasses_() }, g.prototype.check = g.prototype.check, g.prototype.uncheck = function () { this.inputElement_.checked = !1, this.updateClasses_() }, g.prototype.uncheck = g.prototype.uncheck, g.prototype.init = function () { if (this.element_) { this.inputElement_ = this.element_.querySelector("." + this.CssClasses_.INPUT); var a = document.createElement("span"); a.classList.add(this.CssClasses_.BOX_OUTLINE); var b = document.createElement("span"); b.classList.add(this.CssClasses_.FOCUS_HELPER); var c = document.createElement("span"); if (c.classList.add(this.CssClasses_.TICK_OUTLINE), a.appendChild(c), this.element_.appendChild(b), this.element_.appendChild(a), this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) { this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS), this.rippleContainerElement_ = document.createElement("span"), this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER), this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_EFFECT), this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER), this.boundRippleMouseUp = this.onMouseUp_.bind(this), this.rippleContainerElement_.addEventListener("mouseup", this.boundRippleMouseUp); var d = document.createElement("span"); d.classList.add(this.CssClasses_.RIPPLE), this.rippleContainerElement_.appendChild(d), this.element_.appendChild(this.rippleContainerElement_) } this.boundInputOnChange = this.onChange_.bind(this), this.boundInputOnFocus = this.onFocus_.bind(this), this.boundInputOnBlur = this.onBlur_.bind(this), this.boundElementMouseUp = this.onMouseUp_.bind(this), this.inputElement_.addEventListener("change", this.boundInputOnChange), this.inputElement_.addEventListener("focus", this.boundInputOnFocus), this.inputElement_.addEventListener("blur", this.boundInputOnBlur), this.element_.addEventListener("mouseup", this.boundElementMouseUp), this.updateClasses_(), this.element_.classList.add(this.CssClasses_.IS_UPGRADED) } }, g.prototype.mdlDowngrade_ = function () { this.rippleContainerElement_ && this.rippleContainerElement_.removeEventListener("mouseup", this.boundRippleMouseUp), this.inputElement_.removeEventListener("change", this.boundInputOnChange), this.inputElement_.removeEventListener("focus", this.boundInputOnFocus), this.inputElement_.removeEventListener("blur", this.boundInputOnBlur), this.element_.removeEventListener("mouseup", this.boundElementMouseUp) }, a.register({ constructor: g, classAsString: "MaterialCheckbox", cssClass: "mdl-js-checkbox", widget: !0 }); var h = function (a) { this.element_ = a, this.init() }; window.MaterialIconToggle = h, h.prototype.Constant_ = { TINY_TIMEOUT: .001 }, h.prototype.CssClasses_ = { INPUT: "mdl-icon-toggle__input", JS_RIPPLE_EFFECT: "mdl-js-ripple-effect", RIPPLE_IGNORE_EVENTS: "mdl-js-ripple-effect--ignore-events", RIPPLE_CONTAINER: "mdl-icon-toggle__ripple-container", RIPPLE_CENTER: "mdl-ripple--center", RIPPLE: "mdl-ripple", IS_FOCUSED: "is-focused", IS_DISABLED: "is-disabled", IS_CHECKED: "is-checked" }, h.prototype.onChange_ = function () { this.updateClasses_() }, h.prototype.onFocus_ = function () { this.element_.classList.add(this.CssClasses_.IS_FOCUSED) }, h.prototype.onBlur_ = function () { this.element_.classList.remove(this.CssClasses_.IS_FOCUSED) }, h.prototype.onMouseUp_ = function () { this.blur_() }, h.prototype.updateClasses_ = function () { this.checkDisabled(), this.checkToggleState() }, h.prototype.blur_ = function () { window.setTimeout(function () { this.inputElement_.blur() }.bind(this), this.Constant_.TINY_TIMEOUT) }, h.prototype.checkToggleState = function () { this.inputElement_.checked ? this.element_.classList.add(this.CssClasses_.IS_CHECKED) : this.element_.classList.remove(this.CssClasses_.IS_CHECKED) }, h.prototype.checkToggleState = h.prototype.checkToggleState, h.prototype.checkDisabled = function () { this.inputElement_.disabled ? this.element_.classList.add(this.CssClasses_.IS_DISABLED) : this.element_.classList.remove(this.CssClasses_.IS_DISABLED) }, h.prototype.checkDisabled = h.prototype.checkDisabled, h.prototype.disable = function () { this.inputElement_.disabled = !0, this.updateClasses_() }, h.prototype.disable = h.prototype.disable, h.prototype.enable = function () { this.inputElement_.disabled = !1, this.updateClasses_() }, h.prototype.enable = h.prototype.enable, h.prototype.check = function () { this.inputElement_.checked = !0, this.updateClasses_() }, h.prototype.check = h.prototype.check, h.prototype.uncheck = function () { this.inputElement_.checked = !1, this.updateClasses_() }, h.prototype.uncheck = h.prototype.uncheck, h.prototype.init = function () { if (this.element_) { if (this.inputElement_ = this.element_.querySelector("." + this.CssClasses_.INPUT), this.element_.classList.contains(this.CssClasses_.JS_RIPPLE_EFFECT)) { this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS), this.rippleContainerElement_ = document.createElement("span"), this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER), this.rippleContainerElement_.classList.add(this.CssClasses_.JS_RIPPLE_EFFECT), this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER), this.boundRippleMouseUp = this.onMouseUp_.bind(this), this.rippleContainerElement_.addEventListener("mouseup", this.boundRippleMouseUp); var a = document.createElement("span"); a.classList.add(this.CssClasses_.RIPPLE), this.rippleContainerElement_.appendChild(a), this.element_.appendChild(this.rippleContainerElement_) } this.boundInputOnChange = this.onChange_.bind(this), this.boundInputOnFocus = this.onFocus_.bind(this), this.boundInputOnBlur = this.onBlur_.bind(this), this.boundElementOnMouseUp = this.onMouseUp_.bind(this), this.inputElement_.addEventListener("change", this.boundInputOnChange), this.inputElement_.addEventListener("focus", this.boundInputOnFocus), this.inputElement_.addEventListener("blur", this.boundInputOnBlur), this.element_.addEventListener("mouseup", this.boundElementOnMouseUp), this.updateClasses_(), this.element_.classList.add("is-upgraded") } }, h.prototype.mdlDowngrade_ = function () { this.rippleContainerElement_ && this.rippleContainerElement_.removeEventListener("mouseup", this.boundRippleMouseUp), this.inputElement_.removeEventListener("change", this.boundInputOnChange), this.inputElement_.removeEventListener("focus", this.boundInputOnFocus), this.inputElement_.removeEventListener("blur", this.boundInputOnBlur), this.element_.removeEventListener("mouseup", this.boundElementOnMouseUp) }, a.register({ constructor: h, classAsString: "MaterialIconToggle", cssClass: "mdl-js-icon-toggle", widget: !0 }); var i = function (a) { this.element_ = a, this.init() }; window.MaterialMenu = i, i.prototype.Constant_ = { TRANSITION_DURATION_SECONDS: .3, TRANSITION_DURATION_FRACTION: .8, CLOSE_TIMEOUT: 150 }, i.prototype.Keycodes_ = { ENTER: 13, ESCAPE: 27, SPACE: 32, UP_ARROW: 38, DOWN_ARROW: 40 }, i.prototype.CssClasses_ = { CONTAINER: "mdl-menu__container", OUTLINE: "mdl-menu__outline", ITEM: "mdl-menu__item", ITEM_RIPPLE_CONTAINER: "mdl-menu__item-ripple-container", RIPPLE_EFFECT: "mdl-js-ripple-effect", RIPPLE_IGNORE_EVENTS: "mdl-js-ripple-effect--ignore-events", RIPPLE: "mdl-ripple", IS_UPGRADED: "is-upgraded", IS_VISIBLE: "is-visible", IS_ANIMATING: "is-animating", BOTTOM_LEFT: "mdl-menu--bottom-left", BOTTOM_RIGHT: "mdl-menu--bottom-right", TOP_LEFT: "mdl-menu--top-left", TOP_RIGHT: "mdl-menu--top-right", UNALIGNED: "mdl-menu--unaligned" }, i.prototype.init = function () { if (this.element_) { var a = document.createElement("div"); a.classList.add(this.CssClasses_.CONTAINER), this.element_.parentElement.insertBefore(a, this.element_), this.element_.parentElement.removeChild(this.element_), a.appendChild(this.element_), this.container_ = a; var b = document.createElement("div"); b.classList.add(this.CssClasses_.OUTLINE), this.outline_ = b, a.insertBefore(b, this.element_); var c = this.element_.getAttribute("for"), d = null; c && (d = document.getElementById(c), d && (this.forElement_ = d, d.addEventListener("click", this.handleForClick_.bind(this)), d.addEventListener("keydown", this.handleForKeyboardEvent_.bind(this)))); var e = this.element_.querySelectorAll("." + this.CssClasses_.ITEM); this.boundItemKeydown = this.handleItemKeyboardEvent_.bind(this), this.boundItemClick = this.handleItemClick_.bind(this); for (var f = 0; f < e.length; f++) e[f].addEventListener("click", this.boundItemClick), e[f].tabIndex = "-1", e[f].addEventListener("keydown", this.boundItemKeydown); if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) for (this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS), f = 0; f < e.length; f++) { var g = e[f], h = document.createElement("span"); h.classList.add(this.CssClasses_.ITEM_RIPPLE_CONTAINER); var i = document.createElement("span"); i.classList.add(this.CssClasses_.RIPPLE), h.appendChild(i), g.appendChild(h), g.classList.add(this.CssClasses_.RIPPLE_EFFECT) } this.element_.classList.contains(this.CssClasses_.BOTTOM_LEFT) && this.outline_.classList.add(this.CssClasses_.BOTTOM_LEFT), this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT) && this.outline_.classList.add(this.CssClasses_.BOTTOM_RIGHT), this.element_.classList.contains(this.CssClasses_.TOP_LEFT) && this.outline_.classList.add(this.CssClasses_.TOP_LEFT), this.element_.classList.contains(this.CssClasses_.TOP_RIGHT) && this.outline_.classList.add(this.CssClasses_.TOP_RIGHT), this.element_.classList.contains(this.CssClasses_.UNALIGNED) && this.outline_.classList.add(this.CssClasses_.UNALIGNED), a.classList.add(this.CssClasses_.IS_UPGRADED) } }, i.prototype.handleForClick_ = function (a) { if (this.element_ && this.forElement_) { var b = this.forElement_.getBoundingClientRect(), c = this.forElement_.parentElement.getBoundingClientRect(); this.element_.classList.contains(this.CssClasses_.UNALIGNED) || (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT) ? (this.container_.style.right = c.right - b.right + "px", this.container_.style.top = this.forElement_.offsetTop + this.forElement_.offsetHeight + "px") : this.element_.classList.contains(this.CssClasses_.TOP_LEFT) ? (this.container_.style.left = this.forElement_.offsetLeft + "px", this.container_.style.bottom = c.bottom - b.top + "px") : this.element_.classList.contains(this.CssClasses_.TOP_RIGHT) ? (this.container_.style.right = c.right - b.right + "px", this.container_.style.bottom = c.bottom - b.top + "px") : (this.container_.style.left = this.forElement_.offsetLeft + "px", this.container_.style.top = this.forElement_.offsetTop + this.forElement_.offsetHeight + "px")) } this.toggle(a) }, i.prototype.handleForKeyboardEvent_ = function (a) { if (this.element_ && this.container_ && this.forElement_) { var b = this.element_.querySelectorAll("." + this.CssClasses_.ITEM + ":not([disabled])"); b && b.length > 0 && this.container_.classList.contains(this.CssClasses_.IS_VISIBLE) && (a.keyCode === this.Keycodes_.UP_ARROW ? (a.preventDefault(), b[b.length - 1].focus()) : a.keyCode === this.Keycodes_.DOWN_ARROW && (a.preventDefault(), b[0].focus())) } }, i.prototype.handleItemKeyboardEvent_ = function (a) { if (this.element_ && this.container_) { var b = this.element_.querySelectorAll("." + this.CssClasses_.ITEM + ":not([disabled])"); if (b && b.length > 0 && this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) { var c = Array.prototype.slice.call(b).indexOf(a.target); if (a.keyCode === this.Keycodes_.UP_ARROW) a.preventDefault(), c > 0 ? b[c - 1].focus() : b[b.length - 1].focus(); else if (a.keyCode === this.Keycodes_.DOWN_ARROW) a.preventDefault(), b.length > c + 1 ? b[c + 1].focus() : b[0].focus(); else if (a.keyCode === this.Keycodes_.SPACE || a.keyCode === this.Keycodes_.ENTER) { a.preventDefault(); var d = new MouseEvent("mousedown"); a.target.dispatchEvent(d), d = new MouseEvent("mouseup"), a.target.dispatchEvent(d), a.target.click() } else a.keyCode === this.Keycodes_.ESCAPE && (a.preventDefault(), this.hide()) } } }, i.prototype.handleItemClick_ = function (a) { null !== a.target.getAttribute("disabled") ? a.stopPropagation() : (this.closing_ = !0, window.setTimeout(function () { this.hide(), this.closing_ = !1 }.bind(this), this.Constant_.CLOSE_TIMEOUT)) }, i.prototype.applyClip_ = function (a, b) { this.element_.style.clip = this.element_.classList.contains(this.CssClasses_.UNALIGNED) ? "" : this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT) ? "rect(0 " + b + "px 0 " + b + "px)" : this.element_.classList.contains(this.CssClasses_.TOP_LEFT) ? "rect(" + a + "px 0 " + a + "px 0)" : this.element_.classList.contains(this.CssClasses_.TOP_RIGHT) ? "rect(" + a + "px " + b + "px " + a + "px " + b + "px)" : "" }, i.prototype.addAnimationEndListener_ = function () { var a = function () { this.element_.removeEventListener("transitionend", a), this.element_.removeEventListener("webkitTransitionEnd", a), this.element_.classList.remove(this.CssClasses_.IS_ANIMATING) }.bind(this); this.element_.addEventListener("transitionend", a), this.element_.addEventListener("webkitTransitionEnd", a) }, i.prototype.show = function (a) { if (this.element_ && this.container_ && this.outline_) { var b = this.element_.getBoundingClientRect().height, c = this.element_.getBoundingClientRect().width; this.container_.style.width = c + "px", this.container_.style.height = b + "px", this.outline_.style.width = c + "px", this.outline_.style.height = b + "px"; for (var d = this.Constant_.TRANSITION_DURATION_SECONDS * this.Constant_.TRANSITION_DURATION_FRACTION, e = this.element_.querySelectorAll("." + this.CssClasses_.ITEM), f = 0; f < e.length; f++) { var g = null; g = this.element_.classList.contains(this.CssClasses_.TOP_LEFT) || this.element_.classList.contains(this.CssClasses_.TOP_RIGHT) ? (b - e[f].offsetTop - e[f].offsetHeight) / b * d + "s" : e[f].offsetTop / b * d + "s", e[f].style.transitionDelay = g } this.applyClip_(b, c), window.requestAnimationFrame(function () { this.element_.classList.add(this.CssClasses_.IS_ANIMATING), this.element_.style.clip = "rect(0 " + c + "px " + b + "px 0)", this.container_.classList.add(this.CssClasses_.IS_VISIBLE) }.bind(this)), this.addAnimationEndListener_(); var h = function (b) { b === a || this.closing_ || (document.removeEventListener("click", h), this.hide()) }.bind(this); document.addEventListener("click", h) } }, i.prototype.show = i.prototype.show, i.prototype.hide = function () { if (this.element_ && this.container_ && this.outline_) { for (var a = this.element_.querySelectorAll("." + this.CssClasses_.ITEM), b = 0; b < a.length; b++) a[b].style.transitionDelay = null; var c = this.element_.getBoundingClientRect().height, d = this.element_.getBoundingClientRect().width; this.element_.classList.add(this.CssClasses_.IS_ANIMATING), this.applyClip_(c, d), this.container_.classList.remove(this.CssClasses_.IS_VISIBLE), this.addAnimationEndListener_() } }, i.prototype.hide = i.prototype.hide, i.prototype.toggle = function (a) { this.container_.classList.contains(this.CssClasses_.IS_VISIBLE) ? this.hide() : this.show(a) }, i.prototype.toggle = i.prototype.toggle, i.prototype.mdlDowngrade_ = function () { for (var a = this.element_.querySelectorAll("." + this.CssClasses_.ITEM), b = 0; b < a.length; b++) a[b].removeEventListener("click", this.boundItemClick), a[b].removeEventListener("keydown", this.boundItemKeydown) }, a.register({ constructor: i, classAsString: "MaterialMenu", cssClass: "mdl-js-menu", widget: !0 }); var j = function (a) { this.element_ = a, this.init() }; window.MaterialProgress = j, j.prototype.Constant_ = {}, j.prototype.CssClasses_ = { INDETERMINATE_CLASS: "mdl-progress__indeterminate" }, j.prototype.setProgress = function (a) { this.element_.classList.contains(this.CssClasses_.INDETERMINATE_CLASS) || (this.progressbar_.style.width = a + "%") }, j.prototype.setProgress = j.prototype.setProgress, j.prototype.setBuffer = function (a) { this.bufferbar_.style.width = a + "%", this.auxbar_.style.width = 100 - a + "%" }, j.prototype.setBuffer = j.prototype.setBuffer, j.prototype.init = function () { if (this.element_) { var a = document.createElement("div"); a.className = "progressbar bar bar1", this.element_.appendChild(a), this.progressbar_ = a, a = document.createElement("div"), a.className = "bufferbar bar bar2", this.element_.appendChild(a), this.bufferbar_ = a, a = document.createElement("div"), a.className = "auxbar bar bar3", this.element_.appendChild(a), this.auxbar_ = a, this.progressbar_.style.width = "0%", this.bufferbar_.style.width = "100%", this.auxbar_.style.width = "0%", this.element_.classList.add("is-upgraded") } }, j.prototype.mdlDowngrade_ = function () { for (; this.element_.firstChild;) this.element_.removeChild(this.element_.firstChild) }, a.register({ constructor: j, classAsString: "MaterialProgress", cssClass: "mdl-js-progress", widget: !0 }); var k = function (a) { this.element_ = a, this.init() }; window.MaterialRadio = k, k.prototype.Constant_ = { TINY_TIMEOUT: .001 }, k.prototype.CssClasses_ = { IS_FOCUSED: "is-focused", IS_DISABLED: "is-disabled", IS_CHECKED: "is-checked", IS_UPGRADED: "is-upgraded", JS_RADIO: "mdl-js-radio", RADIO_BTN: "mdl-radio__button", RADIO_OUTER_CIRCLE: "mdl-radio__outer-circle", RADIO_INNER_CIRCLE: "mdl-radio__inner-circle", RIPPLE_EFFECT: "mdl-js-ripple-effect", RIPPLE_IGNORE_EVENTS: "mdl-js-ripple-effect--ignore-events", RIPPLE_CONTAINER: "mdl-radio__ripple-container", RIPPLE_CENTER: "mdl-ripple--center", RIPPLE: "mdl-ripple" }, k.prototype.onChange_ = function () { for (var b = document.getElementsByClassName(this.CssClasses_.JS_RADIO), c = 0; c < b.length; c++) { var d = b[c].querySelector("." + this.CssClasses_.RADIO_BTN); d.getAttribute("name") === this.btnElement_.getAttribute("name") && b[c].MaterialRadio.updateClasses_() } }, k.prototype.onFocus_ = function () { this.element_.classList.add(this.CssClasses_.IS_FOCUSED) }, k.prototype.onBlur_ = function () { this.element_.classList.remove(this.CssClasses_.IS_FOCUSED) }, k.prototype.onMouseup_ = function () { this.blur_() }, k.prototype.updateClasses_ = function () { this.checkDisabled(), this.checkToggleState() }, k.prototype.blur_ = function () { window.setTimeout(function () { this.btnElement_.blur() }.bind(this), this.Constant_.TINY_TIMEOUT) }, k.prototype.checkDisabled = function () { this.btnElement_.disabled ? this.element_.classList.add(this.CssClasses_.IS_DISABLED) : this.element_.classList.remove(this.CssClasses_.IS_DISABLED) }, k.prototype.checkDisabled = k.prototype.checkDisabled, k.prototype.checkToggleState = function () { this.btnElement_.checked ? this.element_.classList.add(this.CssClasses_.IS_CHECKED) : this.element_.classList.remove(this.CssClasses_.IS_CHECKED) }, k.prototype.checkToggleState = k.prototype.checkToggleState, k.prototype.disable = function () { this.btnElement_.disabled = !0, this.updateClasses_() }, k.prototype.disable = k.prototype.disable, k.prototype.enable = function () { this.btnElement_.disabled = !1, this.updateClasses_() }, k.prototype.enable = k.prototype.enable, k.prototype.check = function () { this.btnElement_.checked = !0, this.updateClasses_() }, k.prototype.check = k.prototype.check, k.prototype.uncheck = function () { this.btnElement_.checked = !1, this.updateClasses_() }, k.prototype.uncheck = k.prototype.uncheck, k.prototype.init = function () { if (this.element_) { this.btnElement_ = this.element_.querySelector("." + this.CssClasses_.RADIO_BTN); var a = document.createElement("span"); a.classList.add(this.CssClasses_.RADIO_OUTER_CIRCLE); var b = document.createElement("span"); b.classList.add(this.CssClasses_.RADIO_INNER_CIRCLE), this.element_.appendChild(a), this.element_.appendChild(b); var c; if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) { this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS), c = document.createElement("span"), c.classList.add(this.CssClasses_.RIPPLE_CONTAINER), c.classList.add(this.CssClasses_.RIPPLE_EFFECT), c.classList.add(this.CssClasses_.RIPPLE_CENTER), c.addEventListener("mouseup", this.onMouseup_.bind(this)); var d = document.createElement("span"); d.classList.add(this.CssClasses_.RIPPLE), c.appendChild(d), this.element_.appendChild(c) } this.btnElement_.addEventListener("change", this.onChange_.bind(this)), this.btnElement_.addEventListener("focus", this.onFocus_.bind(this)), this.btnElement_.addEventListener("blur", this.onBlur_.bind(this)), this.element_.addEventListener("mouseup", this.onMouseup_.bind(this)), this.updateClasses_(), this.element_.classList.add(this.CssClasses_.IS_UPGRADED) } }, a.register({ constructor: k, classAsString: "MaterialRadio", cssClass: "mdl-js-radio", widget: !0 }); var l = function (a) { this.element_ = a, this.isIE_ = window.navigator.msPointerEnabled, this.init() }; window.MaterialSlider = l, l.prototype.Constant_ = {}, l.prototype.CssClasses_ = { IE_CONTAINER: "mdl-slider__ie-container", SLIDER_CONTAINER: "mdl-slider__container", BACKGROUND_FLEX: "mdl-slider__background-flex", BACKGROUND_LOWER: "mdl-slider__background-lower", BACKGROUND_UPPER: "mdl-slider__background-upper", IS_LOWEST_VALUE: "is-lowest-value", IS_UPGRADED: "is-upgraded" }, l.prototype.onInput_ = function () { this.updateValueStyles_() }, l.prototype.onChange_ = function () { this.updateValueStyles_() }, l.prototype.onMouseUp_ = function (a) { a.target.blur() }, l.prototype.onContainerMouseDown_ = function (a) { if (a.target === this.element_.parentElement) { a.preventDefault(); var b = new MouseEvent("mousedown", { target: a.target, buttons: a.buttons, clientX: a.clientX, clientY: this.element_.getBoundingClientRect().y }); this.element_.dispatchEvent(b) } }, l.prototype.updateValueStyles_ = function () { var a = (this.element_.value - this.element_.min) / (this.element_.max - this.element_.min); 0 === a ? this.element_.classList.add(this.CssClasses_.IS_LOWEST_VALUE) : this.element_.classList.remove(this.CssClasses_.IS_LOWEST_VALUE), this.isIE_ || (this.backgroundLower_.style.flex = a, this.backgroundLower_.style.webkitFlex = a, this.backgroundUpper_.style.flex = 1 - a, this.backgroundUpper_.style.webkitFlex = 1 - a) }, l.prototype.disable = function () { this.element_.disabled = !0 }, l.prototype.disable = l.prototype.disable, l.prototype.enable = function () { this.element_.disabled = !1 }, l.prototype.enable = l.prototype.enable, l.prototype.change = function (a) { "undefined" !== typeof a && (this.element_.value = a), this.updateValueStyles_() }, l.prototype.change = l.prototype.change, l.prototype.init = function () {if (this.element_) {if (this.isIE_) { var a = document.createElement("div"); a.classList.add(this.CssClasses_.IE_CONTAINER), this.element_.parentElement.insertBefore(a, this.element_), this.element_.parentElement.removeChild(this.element_), a.appendChild(this.element_) } else { var b = document.createElement("div"); b.classList.add(this.CssClasses_.SLIDER_CONTAINER), this.element_.parentElement.insertBefore(b, this.element_), this.element_.parentElement.removeChild(this.element_), b.appendChild(this.element_); var c = document.createElement("div"); c.classList.add(this.CssClasses_.BACKGROUND_FLEX), b.appendChild(c), this.backgroundLower_ = document.createElement("div"), this.backgroundLower_.classList.add(this.CssClasses_.BACKGROUND_LOWER), c.appendChild(this.backgroundLower_), this.backgroundUpper_ = document.createElement("div"), this.backgroundUpper_.classList.add(this.CssClasses_.BACKGROUND_UPPER), c.appendChild(this.backgroundUpper_) } this.boundInputHandler = this.onInput_.bind(this), this.boundChangeHandler = this.onChange_.bind(this), this.boundMouseUpHandler = this.onMouseUp_.bind(this), this.boundContainerMouseDownHandler = this.onContainerMouseDown_.bind(this), this.element_.addEventListener("input", this.boundInputHandler), this.element_.addEventListener("change", this.boundChangeHandler), this.element_.addEventListener("mouseup", this.boundMouseUpHandler), this.element_.parentElement.addEventListener("mousedown", this.boundContainerMouseDownHandler), this.updateValueStyles_(), this.element_.classList.add(this.CssClasses_.IS_UPGRADED)}}, l.prototype.mdlDowngrade_ = function () { this.element_.removeEventListener("input", this.boundInputHandler), this.element_.removeEventListener("change", this.boundChangeHandler), this.element_.removeEventListener("mouseup", this.boundMouseUpHandler), this.element_.parentElement.removeEventListener("mousedown", this.boundContainerMouseDownHandler) }, a.register({ constructor: l, classAsString: "MaterialSlider", cssClass: "mdl-js-slider", widget: !0 }); var m = function (a) { this.element_ = a, this.init() }; window.MaterialSpinner = m, m.prototype.Constant_ = { MDL_SPINNER_LAYER_COUNT: 4 }, m.prototype.CssClasses_ = { MDL_SPINNER_LAYER: "mdl-spinner__layer", MDL_SPINNER_CIRCLE_CLIPPER: "mdl-spinner__circle-clipper", MDL_SPINNER_CIRCLE: "mdl-spinner__circle", MDL_SPINNER_GAP_PATCH: "mdl-spinner__gap-patch", MDL_SPINNER_LEFT: "mdl-spinner__left", MDL_SPINNER_RIGHT: "mdl-spinner__right" }, m.prototype.createLayer = function (a) { var b = document.createElement("div"); b.classList.add(this.CssClasses_.MDL_SPINNER_LAYER), b.classList.add(this.CssClasses_.MDL_SPINNER_LAYER + "-" + a); var c = document.createElement("div"); c.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER), c.classList.add(this.CssClasses_.MDL_SPINNER_LEFT); var d = document.createElement("div"); d.classList.add(this.CssClasses_.MDL_SPINNER_GAP_PATCH); var e = document.createElement("div"); e.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER), e.classList.add(this.CssClasses_.MDL_SPINNER_RIGHT); for (var f = [c, d, e], g = 0; g < f.length; g++) { var h = document.createElement("div"); h.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE), f[g].appendChild(h) } b.appendChild(c), b.appendChild(d), b.appendChild(e), this.element_.appendChild(b) }, m.prototype.createLayer = m.prototype.createLayer, m.prototype.stop = function () { this.element_.classList.remove("is-active") }, m.prototype.stop = m.prototype.stop, m.prototype.start = function () { this.element_.classList.add("is-active") }, m.prototype.start = m.prototype.start, m.prototype.init = function () { if (this.element_) { for (var a = 1; a <= this.Constant_.MDL_SPINNER_LAYER_COUNT; a++) this.createLayer(a); this.element_.classList.add("is-upgraded") } }, a.register({ constructor: m, classAsString: "MaterialSpinner", cssClass: "mdl-js-spinner", widget: !0 }); var n = function (a) { this.element_ = a, this.init() }; window.MaterialSwitch = n, n.prototype.Constant_ = { TINY_TIMEOUT: .001 }, n.prototype.CssClasses_ = { INPUT: "mdl-switch__input", TRACK: "mdl-switch__track", THUMB: "mdl-switch__thumb", FOCUS_HELPER: "mdl-switch__focus-helper", RIPPLE_EFFECT: "mdl-js-ripple-effect", RIPPLE_IGNORE_EVENTS: "mdl-js-ripple-effect--ignore-events", RIPPLE_CONTAINER: "mdl-switch__ripple-container", RIPPLE_CENTER: "mdl-ripple--center", RIPPLE: "mdl-ripple", IS_FOCUSED: "is-focused", IS_DISABLED: "is-disabled", IS_CHECKED: "is-checked" }, n.prototype.onChange_ = function () { this.updateClasses_() }, n.prototype.onFocus_ = function () { this.element_.classList.add(this.CssClasses_.IS_FOCUSED) }, n.prototype.onBlur_ = function () { this.element_.classList.remove(this.CssClasses_.IS_FOCUSED) }, n.prototype.onMouseUp_ = function () { this.blur_() }, n.prototype.updateClasses_ = function () { this.checkDisabled(), this.checkToggleState() }, n.prototype.blur_ = function () { window.setTimeout(function () { this.inputElement_.blur() }.bind(this), this.Constant_.TINY_TIMEOUT) }, n.prototype.checkDisabled = function () { this.inputElement_.disabled ? this.element_.classList.add(this.CssClasses_.IS_DISABLED) : this.element_.classList.remove(this.CssClasses_.IS_DISABLED) }, n.prototype.checkDisabled = n.prototype.checkDisabled, n.prototype.checkToggleState = function () { this.inputElement_.checked ? this.element_.classList.add(this.CssClasses_.IS_CHECKED) : this.element_.classList.remove(this.CssClasses_.IS_CHECKED) }, n.prototype.checkToggleState = n.prototype.checkToggleState, n.prototype.disable = function () { this.inputElement_.disabled = !0, this.updateClasses_() }, n.prototype.disable = n.prototype.disable, n.prototype.enable = function () { this.inputElement_.disabled = !1, this.updateClasses_() }, n.prototype.enable = n.prototype.enable, n.prototype.on = function () { this.inputElement_.checked = !0, this.updateClasses_() }, n.prototype.on = n.prototype.on, n.prototype.off = function () { this.inputElement_.checked = !1, this.updateClasses_() }, n.prototype.off = n.prototype.off, n.prototype.init = function () { if (this.element_) { this.inputElement_ = this.element_.querySelector("." + this.CssClasses_.INPUT); var a = document.createElement("div"); a.classList.add(this.CssClasses_.TRACK); var b = document.createElement("div"); b.classList.add(this.CssClasses_.THUMB); var c = document.createElement("span"); if (c.classList.add(this.CssClasses_.FOCUS_HELPER), b.appendChild(c), this.element_.appendChild(a), this.element_.appendChild(b), this.boundMouseUpHandler = this.onMouseUp_.bind(this), this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) { this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS), this.rippleContainerElement_ = document.createElement("span"), this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER), this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_EFFECT), this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER), this.rippleContainerElement_.addEventListener("mouseup", this.boundMouseUpHandler); var d = document.createElement("span"); d.classList.add(this.CssClasses_.RIPPLE), this.rippleContainerElement_.appendChild(d), this.element_.appendChild(this.rippleContainerElement_) } this.boundChangeHandler = this.onChange_.bind(this), this.boundFocusHandler = this.onFocus_.bind(this), this.boundBlurHandler = this.onBlur_.bind(this), this.inputElement_.addEventListener("change", this.boundChangeHandler), this.inputElement_.addEventListener("focus", this.boundFocusHandler), this.inputElement_.addEventListener("blur", this.boundBlurHandler), this.element_.addEventListener("mouseup", this.boundMouseUpHandler), this.updateClasses_(), this.element_.classList.add("is-upgraded") } }, n.prototype.mdlDowngrade_ = function () { this.rippleContainerElement_ && this.rippleContainerElement_.removeEventListener("mouseup", this.boundMouseUpHandler), this.inputElement_.removeEventListener("change", this.boundChangeHandler), this.inputElement_.removeEventListener("focus", this.boundFocusHandler), this.inputElement_.removeEventListener("blur", this.boundBlurHandler), this.element_.removeEventListener("mouseup", this.boundMouseUpHandler) }, a.register({ constructor: n, classAsString: "MaterialSwitch", cssClass: "mdl-js-switch", widget: !0 }); var o = function (a) { this.element_ = a, this.init() }; window.MaterialTabs = o, o.prototype.Constant_ = {}, o.prototype.CssClasses_ = { TAB_CLASS: "mdl-tabs__tab", PANEL_CLASS: "mdl-tabs__panel", ACTIVE_CLASS: "is-active", UPGRADED_CLASS: "is-upgraded", MDL_JS_RIPPLE_EFFECT: "mdl-js-ripple-effect", MDL_RIPPLE_CONTAINER: "mdl-tabs__ripple-container", MDL_RIPPLE: "mdl-ripple", MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS: "mdl-js-ripple-effect--ignore-events" }, o.prototype.initTabs_ = function () { this.element_.classList.contains(this.CssClasses_.MDL_JS_RIPPLE_EFFECT) && this.element_.classList.add(this.CssClasses_.MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS), this.tabs_ = this.element_.querySelectorAll("." + this.CssClasses_.TAB_CLASS), this.panels_ = this.element_.querySelectorAll("." + this.CssClasses_.PANEL_CLASS); for (var a = 0; a < this.tabs_.length; a++) new p(this.tabs_[a], this); this.element_.classList.add(this.CssClasses_.UPGRADED_CLASS) }, o.prototype.resetTabState_ = function () { for (var a = 0; a < this.tabs_.length; a++) this.tabs_[a].classList.remove(this.CssClasses_.ACTIVE_CLASS) }, o.prototype.resetPanelState_ = function () { for (var a = 0; a < this.panels_.length; a++) this.panels_[a].classList.remove(this.CssClasses_.ACTIVE_CLASS) }, o.prototype.init = function () { this.element_ && this.initTabs_() }, a.register({ constructor: o, classAsString: "MaterialTabs", cssClass: "mdl-js-tabs" }); var q = function (a) { this.element_ = a, this.maxRows = this.Constant_.NO_MAX_ROWS, this.init() }; window.MaterialTextfield = q, q.prototype.Constant_ = { NO_MAX_ROWS: -1, MAX_ROWS_ATTRIBUTE: "maxrows" }, q.prototype.CssClasses_ = { LABEL: "mdl-textfield__label", INPUT: "mdl-textfield__input", IS_DIRTY: "is-dirty", IS_FOCUSED: "is-focused", IS_DISABLED: "is-disabled", IS_INVALID: "is-invalid", IS_UPGRADED: "is-upgraded" }, q.prototype.onKeyDown_ = function (a) { var b = a.target.value.split("\n").length; 13 === a.keyCode && b >= this.maxRows && a.preventDefault() }, q.prototype.onFocus_ = function () { this.element_.classList.add(this.CssClasses_.IS_FOCUSED) }, q.prototype.onBlur_ = function () { this.element_.classList.remove(this.CssClasses_.IS_FOCUSED) }, q.prototype.updateClasses_ = function () { this.checkDisabled(), this.checkValidity(), this.checkDirty() }, q.prototype.checkDisabled = function () { this.input_.disabled ? this.element_.classList.add(this.CssClasses_.IS_DISABLED) : this.element_.classList.remove(this.CssClasses_.IS_DISABLED) }, q.prototype.checkDisabled = q.prototype.checkDisabled, q.prototype.checkValidity = function () { this.input_.validity.valid ? this.element_.classList.remove(this.CssClasses_.IS_INVALID) : this.element_.classList.add(this.CssClasses_.IS_INVALID) }, q.prototype.checkValidity = q.prototype.checkValidity, q.prototype.checkDirty = function () { this.input_.value && this.input_.value.length > 0 ? this.element_.classList.add(this.CssClasses_.IS_DIRTY) : this.element_.classList.remove(this.CssClasses_.IS_DIRTY) }, q.prototype.checkDirty = q.prototype.checkDirty, q.prototype.disable = function () { this.input_.disabled = !0, this.updateClasses_() }, q.prototype.disable = q.prototype.disable, q.prototype.enable = function () { this.input_.disabled = !1, this.updateClasses_() }, q.prototype.enable = q.prototype.enable, q.prototype.change = function (a) { this.input_.value = a ? a : "", this.updateClasses_() }, q.prototype.change = q.prototype.change, q.prototype.init = function () { this.element_ && (this.label_ = this.element_.querySelector("." + this.CssClasses_.LABEL), this.input_ = this.element_.querySelector("." + this.CssClasses_.INPUT), this.input_ && (this.input_.hasAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE) && (this.maxRows = parseInt(this.input_.getAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE), 10), isNaN(this.maxRows) && (this.maxRows = this.Constant_.NO_MAX_ROWS)), this.boundUpdateClassesHandler = this.updateClasses_.bind(this), this.boundFocusHandler = this.onFocus_.bind(this), this.boundBlurHandler = this.onBlur_.bind(this), this.input_.addEventListener("input", this.boundUpdateClassesHandler), this.input_.addEventListener("focus", this.boundFocusHandler), this.input_.addEventListener("blur", this.boundBlurHandler), this.maxRows !== this.Constant_.NO_MAX_ROWS && (this.boundKeyDownHandler = this.onKeyDown_.bind(this), this.input_.addEventListener("keydown", this.boundKeyDownHandler)), this.updateClasses_(), this.element_.classList.add(this.CssClasses_.IS_UPGRADED))) }, q.prototype.mdlDowngrade_ = function () { this.input_.removeEventListener("input", this.boundUpdateClassesHandler), this.input_.removeEventListener("focus", this.boundFocusHandler), this.input_.removeEventListener("blur", this.boundBlurHandler), this.boundKeyDownHandler && this.input_.removeEventListener("keydown", this.boundKeyDownHandler) }, a.register({ constructor: q, classAsString: "MaterialTextfield", cssClass: "mdl-js-textfield", widget: !0 }); var r = function (a) { this.element_ = a, this.init() }; window.MaterialTooltip = r, r.prototype.Constant_ = {}, r.prototype.CssClasses_ = { IS_ACTIVE: "is-active" }, r.prototype.handleMouseEnter_ = function (a) { a.stopPropagation(); var b = a.target.getBoundingClientRect(), c = b.left + b.width / 2, d = -1 * (this.element_.offsetWidth / 2); c + d < 0 ? (this.element_.style.left = 0, this.element_.style.marginLeft = 0) : (this.element_.style.left = c + "px", this.element_.style.marginLeft = d + "px"), this.element_.style.top = b.top + b.height + 10 + "px", this.element_.classList.add(this.CssClasses_.IS_ACTIVE), window.addEventListener("scroll", this.boundMouseLeaveHandler, !1), window.addEventListener("touchmove", this.boundMouseLeaveHandler, !1) }, r.prototype.handleMouseLeave_ = function (a) { a.stopPropagation(), this.element_.classList.remove(this.CssClasses_.IS_ACTIVE), window.removeEventListener("scroll", this.boundMouseLeaveHandler), window.removeEventListener("touchmove", this.boundMouseLeaveHandler, !1) }, r.prototype.init = function () { if (this.element_) { var a = this.element_.getAttribute("for"); a && (this.forElement_ = document.getElementById(a)), this.forElement_ && (this.forElement_.getAttribute("tabindex") || this.forElement_.setAttribute("tabindex", "0"), this.boundMouseEnterHandler = this.handleMouseEnter_.bind(this), this.boundMouseLeaveHandler = this.handleMouseLeave_.bind(this), this.forElement_.addEventListener("mouseenter", this.boundMouseEnterHandler, !1), this.forElement_.addEventListener("click", this.boundMouseEnterHandler, !1), this.forElement_.addEventListener("blur", this.boundMouseLeaveHandler), this.forElement_.addEventListener("touchstart", this.boundMouseEnterHandler, !1), this.forElement_.addEventListener("mouseleave", this.boundMouseLeaveHandler)) } }, r.prototype.mdlDowngrade_ = function () { this.forElement_ && (this.forElement_.removeEventListener("mouseenter", this.boundMouseEnterHandler, !1), this.forElement_.removeEventListener("click", this.boundMouseEnterHandler, !1), this.forElement_.removeEventListener("touchstart", this.boundMouseEnterHandler, !1), this.forElement_.removeEventListener("mouseleave", this.boundMouseLeaveHandler)) }, a.register({ constructor: r, classAsString: "MaterialTooltip", cssClass: "mdl-tooltip" }); var s = function (a) { this.element_ = a, this.init() }; window.MaterialLayout = s, s.prototype.Constant_ = { MAX_WIDTH: "(max-width: 1024px)", TAB_SCROLL_PIXELS: 100, MENU_ICON: "menu", CHEVRON_LEFT: "chevron_left", CHEVRON_RIGHT: "chevron_right" }, s.prototype.Mode_ = { STANDARD: 0, SEAMED: 1, WATERFALL: 2, SCROLL: 3 }, s.prototype.CssClasses_ = { CONTAINER: "mdl-layout__container", HEADER: "mdl-layout__header", DRAWER: "mdl-layout__drawer", CONTENT: "mdl-layout__content", DRAWER_BTN: "mdl-layout__drawer-button", ICON: "material-icons", FA_ICON: "fa", FA_ICON_MENU: "fa-navicon", JS_RIPPLE_EFFECT: "mdl-js-ripple-effect", RIPPLE_CONTAINER: "mdl-layout__tab-ripple-container", RIPPLE: "mdl-ripple", RIPPLE_IGNORE_EVENTS: "mdl-js-ripple-effect--ignore-events", HEADER_SEAMED: "mdl-layout__header--seamed", HEADER_WATERFALL: "mdl-layout__header--waterfall", HEADER_SCROLL: "mdl-layout__header--scroll", FIXED_HEADER: "mdl-layout--fixed-header", OBFUSCATOR: "mdl-layout__obfuscator", TAB_BAR: "mdl-layout__tab-bar", TAB_CONTAINER: "mdl-layout__tab-bar-container", TAB: "mdl-layout__tab", TAB_BAR_BUTTON: "mdl-layout__tab-bar-button", TAB_BAR_LEFT_BUTTON: "mdl-layout__tab-bar-left-button", TAB_BAR_RIGHT_BUTTON: "mdl-layout__tab-bar-right-button", PANEL: "mdl-layout__tab-panel", HAS_DRAWER: "has-drawer", HAS_TABS: "has-tabs", HAS_SCROLLING_HEADER: "has-scrolling-header", CASTING_SHADOW: "is-casting-shadow", IS_COMPACT: "is-compact", IS_SMALL_SCREEN: "is-small-screen", IS_DRAWER_OPEN: "is-visible", IS_ACTIVE: "is-active", IS_UPGRADED: "is-upgraded", IS_ANIMATING: "is-animating", ON_LARGE_SCREEN: "mdl-layout--large-screen-only", ON_SMALL_SCREEN: "mdl-layout--small-screen-only" }, s.prototype.contentScrollHandler_ = function () { this.header_.classList.contains(this.CssClasses_.IS_ANIMATING) || (this.content_.scrollTop > 0 && !this.header_.classList.contains(this.CssClasses_.IS_COMPACT) ? (this.header_.classList.add(this.CssClasses_.CASTING_SHADOW), this.header_.classList.add(this.CssClasses_.IS_COMPACT), this.header_.classList.add(this.CssClasses_.IS_ANIMATING)) : this.content_.scrollTop <= 0 && this.header_.classList.contains(this.CssClasses_.IS_COMPACT) && (this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW), this.header_.classList.remove(this.CssClasses_.IS_COMPACT), this.header_.classList.add(this.CssClasses_.IS_ANIMATING))) }, s.prototype.screenSizeHandler_ = function () { this.screenSizeMediaQuery_.matches ? this.element_.classList.add(this.CssClasses_.IS_SMALL_SCREEN) : (this.element_.classList.remove(this.CssClasses_.IS_SMALL_SCREEN), this.drawer_ && this.drawer_.classList.remove(this.CssClasses_.IS_DRAWER_OPEN)) }, s.prototype.drawerToggleHandler_ = function () { this.drawer_.classList.toggle(this.CssClasses_.IS_DRAWER_OPEN) }, s.prototype.headerTransitionEndHandler_ = function () { this.header_.classList.remove(this.CssClasses_.IS_ANIMATING) }, s.prototype.headerClickHandler_ = function () { this.header_.classList.contains(this.CssClasses_.IS_COMPACT) && (this.header_.classList.remove(this.CssClasses_.IS_COMPACT), this.header_.classList.add(this.CssClasses_.IS_ANIMATING)) }, s.prototype.resetTabState_ = function (a) { for (var b = 0; b < a.length; b++) a[b].classList.remove(this.CssClasses_.IS_ACTIVE) }, s.prototype.resetPanelState_ = function (a) { for (var b = 0; b < a.length; b++) a[b].classList.remove(this.CssClasses_.IS_ACTIVE) }, s.prototype.init = function () { if (this.element_) { var a = document.createElement("div"); a.classList.add(this.CssClasses_.CONTAINER), this.element_.parentElement.insertBefore(a, this.element_), this.element_.parentElement.removeChild(this.element_), a.appendChild(this.element_); for (var b = this.element_.childNodes, c = 0; c < b.length; c++) { var d = b[c]; d.classList && d.classList.contains(this.CssClasses_.HEADER) && (this.header_ = d), d.classList && d.classList.contains(this.CssClasses_.DRAWER) && (this.drawer_ = d), d.classList && d.classList.contains(this.CssClasses_.CONTENT) && (this.content_ = d) } this.header_ && (this.tabBar_ = this.header_.querySelector("." + this.CssClasses_.TAB_BAR)); var e = this.Mode_.STANDARD; this.screenSizeMediaQuery_ = window.matchMedia(this.Constant_.MAX_WIDTH), this.screenSizeMediaQuery_.addListener(this.screenSizeHandler_.bind(this)), this.screenSizeHandler_(), this.header_ && (this.header_.classList.contains(this.CssClasses_.HEADER_SEAMED) ? e = this.Mode_.SEAMED : this.header_.classList.contains(this.CssClasses_.HEADER_WATERFALL) ? (e = this.Mode_.WATERFALL, this.header_.addEventListener("transitionend", this.headerTransitionEndHandler_.bind(this)), this.header_.addEventListener("click", this.headerClickHandler_.bind(this))) : this.header_.classList.contains(this.CssClasses_.HEADER_SCROLL) && (e = this.Mode_.SCROLL, a.classList.add(this.CssClasses_.HAS_SCROLLING_HEADER)), e === this.Mode_.STANDARD ? (this.header_.classList.add(this.CssClasses_.CASTING_SHADOW), this.tabBar_ && this.tabBar_.classList.add(this.CssClasses_.CASTING_SHADOW)) : e === this.Mode_.SEAMED || e === this.Mode_.SCROLL ? (this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW), this.tabBar_ && this.tabBar_.classList.remove(this.CssClasses_.CASTING_SHADOW)) : e === this.Mode_.WATERFALL && (this.content_.addEventListener("scroll", this.contentScrollHandler_.bind(this)), this.contentScrollHandler_())); var f = function (a) { a.preventDefault() }; if (this.drawer_) { var g = this.element_.querySelector("." + this.CssClasses_.DRAWER_BTN); if ("undefined" === typeof g || null === g) { g = document.createElement("div"), g.classList.add(this.CssClasses_.DRAWER_BTN); var h = document.createElement("i"); h.classList.add(this.CssClasses_.FA_ICON), h.classList.add(this.CssClasses_.FA_ICON_MENU), g.appendChild(h) } this.drawer_.classList.contains(this.CssClasses_.ON_LARGE_SCREEN) ? g.classList.add(this.CssClasses_.ON_LARGE_SCREEN) : this.drawer_.classList.contains(this.CssClasses_.ON_SMALL_SCREEN) && g.classList.add(this.CssClasses_.ON_SMALL_SCREEN), g.addEventListener("click", this.drawerToggleHandler_.bind(this)), this.element_.classList.add(this.CssClasses_.HAS_DRAWER), this.drawer_.addEventListener("mousewheel", f), this.element_.classList.contains(this.CssClasses_.FIXED_HEADER) ? this.header_.insertBefore(g, this.header_.firstChild) : this.element_.insertBefore(g, this.content_); var i = document.createElement("div"); i.classList.add(this.CssClasses_.OBFUSCATOR), this.element_.appendChild(i), i.addEventListener("click", this.drawerToggleHandler_.bind(this)), i.addEventListener("mousewheel", f) } if (this.header_ && this.tabBar_) { this.element_.classList.add(this.CssClasses_.HAS_TABS); var j = document.createElement("div"); j.classList.add(this.CssClasses_.TAB_CONTAINER), this.header_.insertBefore(j, this.tabBar_), this.header_.removeChild(this.tabBar_); var k = document.createElement("div"); k.classList.add(this.CssClasses_.TAB_BAR_BUTTON), k.classList.add(this.CssClasses_.TAB_BAR_LEFT_BUTTON); var l = document.createElement("i"); l.classList.add(this.CssClasses_.ICON), l.textContent = this.Constant_.CHEVRON_LEFT, k.appendChild(l), k.addEventListener("click", function () { this.tabBar_.scrollLeft -= this.Constant_.TAB_SCROLL_PIXELS }.bind(this)); var m = document.createElement("div"); m.classList.add(this.CssClasses_.TAB_BAR_BUTTON), m.classList.add(this.CssClasses_.TAB_BAR_RIGHT_BUTTON); var n = document.createElement("i"); n.classList.add(this.CssClasses_.ICON), n.textContent = this.Constant_.CHEVRON_RIGHT, m.appendChild(n), m.addEventListener("click", function () { this.tabBar_.scrollLeft += this.Constant_.TAB_SCROLL_PIXELS }.bind(this)), j.appendChild(k), j.appendChild(this.tabBar_), j.appendChild(m); var o = function () { this.tabBar_.scrollLeft > 0 ? k.classList.add(this.CssClasses_.IS_ACTIVE) : k.classList.remove(this.CssClasses_.IS_ACTIVE), this.tabBar_.scrollLeft < this.tabBar_.scrollWidth - this.tabBar_.offsetWidth ? m.classList.add(this.CssClasses_.IS_ACTIVE) : m.classList.remove(this.CssClasses_.IS_ACTIVE) }.bind(this); this.tabBar_.addEventListener("scroll", o), o(), this.tabBar_.classList.contains(this.CssClasses_.JS_RIPPLE_EFFECT) && this.tabBar_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS); for (var p = this.tabBar_.querySelectorAll("." + this.CssClasses_.TAB), q = this.content_.querySelectorAll("." + this.CssClasses_.PANEL), r = 0; r < p.length; r++) new t(p[r], p, q, this) } this.element_.classList.add(this.CssClasses_.IS_UPGRADED) } }, a.register({ constructor: s, classAsString: "MaterialLayout", cssClass: "mdl-js-layout" }); var u = function (a) { this.element_ = a, this.init() }; window.MaterialDataTable = u, u.prototype.Constant_ = {}, u.prototype.CssClasses_ = { DATA_TABLE: "mdl-data-table", SELECTABLE: "mdl-data-table--selectable", IS_SELECTED: "is-selected", IS_UPGRADED: "is-upgraded" }, u.prototype.selectRow_ = function (a, b, c) { return b ? function () { a.checked ? b.classList.add(this.CssClasses_.IS_SELECTED) : b.classList.remove(this.CssClasses_.IS_SELECTED) }.bind(this) : c ? function () { var b, d; if (a.checked) for (b = 0; b < c.length; b++) d = c[b].querySelector("td").querySelector(".mdl-checkbox"), d.MaterialCheckbox.check(), c[b].classList.add(this.CssClasses_.IS_SELECTED); else for (b = 0; b < c.length; b++) d = c[b].querySelector("td").querySelector(".mdl-checkbox"), d.MaterialCheckbox.uncheck(), c[b].classList.remove(this.CssClasses_.IS_SELECTED) }.bind(this) : void 0 }, u.prototype.createCheckbox_ = function (b, c) { var d = document.createElement("label"); d.classList.add("mdl-checkbox"), d.classList.add("mdl-js-checkbox"), d.classList.add("mdl-js-ripple-effect"), d.classList.add("mdl-data-table__select"); var e = document.createElement("input"); return e.type = "checkbox", e.classList.add("mdl-checkbox__input"), b ? e.addEventListener("change", this.selectRow_(e, b)) : c && e.addEventListener("change", this.selectRow_(e, null, c)), d.appendChild(e), a.upgradeElement(d, "MaterialCheckbox"), d }, u.prototype.init = function () { if (this.element_) { var a = this.element_.querySelector("th"), b = this.element_.querySelector("tbody").querySelectorAll("tr"); if (this.element_.classList.contains(this.CssClasses_.SELECTABLE)) { var c = document.createElement("th"), d = this.createCheckbox_(null, b); c.appendChild(d), a.parentElement.insertBefore(c, a); for (var e = 0; e < b.length; e++) { var f = b[e].querySelector("td"); if (f) { var g = document.createElement("td"), h = this.createCheckbox_(b[e]); g.appendChild(h), b[e].insertBefore(g, f) } } } this.element_.classList.add(this.CssClasses_.IS_UPGRADED) } }, a.register({ constructor: u, classAsString: "MaterialDataTable", cssClass: "mdl-js-data-table" }); var v = function (a) { this.element_ = a, this.init() }; window.MaterialRipple = v, v.prototype.Constant_ = { INITIAL_SCALE: "scale(0.0001, 0.0001)", INITIAL_SIZE: "1px", INITIAL_OPACITY: "0.4", FINAL_OPACITY: "0", FINAL_SCALE: "" }, v.prototype.CssClasses_ = { RIPPLE_CENTER: "mdl-ripple--center", RIPPLE_EFFECT_IGNORE_EVENTS: "mdl-js-ripple-effect--ignore-events", RIPPLE: "mdl-ripple", IS_ANIMATING: "is-animating", IS_VISIBLE: "is-visible" }, v.prototype.downHandler_ = function (a) { if (!this.rippleElement_.style.width && !this.rippleElement_.style.height) { var b = this.element_.getBoundingClientRect(); this.boundHeight = b.height, this.boundWidth = b.width, this.rippleSize_ = 2 * Math.sqrt(b.width * b.width + b.height * b.height) + 2, this.rippleElement_.style.width = this.rippleSize_ + "px", this.rippleElement_.style.height = this.rippleSize_ + "px" } if (this.rippleElement_.classList.add(this.CssClasses_.IS_VISIBLE), "mousedown" === a.type && this.ignoringMouseDown_) this.ignoringMouseDown_ = !1; else { "touchstart" === a.type && (this.ignoringMouseDown_ = !0); var c = this.getFrameCount(); if (c > 0) return; this.setFrameCount(1); var e, f, d = a.currentTarget.getBoundingClientRect(); if (0 === a.clientX && 0 === a.clientY) e = Math.round(d.width / 2), f = Math.round(d.height / 2); else { var g = a.clientX ? a.clientX : a.touches[0].clientX, h = a.clientY ? a.clientY : a.touches[0].clientY; e = Math.round(g - d.left), f = Math.round(h - d.top) } this.setRippleXY(e, f), this.setRippleStyles(!0), window.requestAnimationFrame(this.animFrameHandler.bind(this)) } }, v.prototype.upHandler_ = function (a) { a && 2 !== a.detail && this.rippleElement_.classList.remove(this.CssClasses_.IS_VISIBLE), window.setTimeout(function () { this.rippleElement_.classList.remove(this.CssClasses_.IS_VISIBLE) }.bind(this), 0) }, v.prototype.init = function () { if (this.element_) { var a = this.element_.classList.contains(this.CssClasses_.RIPPLE_CENTER); this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT_IGNORE_EVENTS) || (this.rippleElement_ = this.element_.querySelector("." + this.CssClasses_.RIPPLE), this.frameCount_ = 0, this.rippleSize_ = 0, this.x_ = 0, this.y_ = 0, this.ignoringMouseDown_ = !1, this.boundDownHandler = this.downHandler_.bind(this), this.element_.addEventListener("mousedown", this.boundDownHandler), this.element_.addEventListener("touchstart", this.boundDownHandler), this.boundUpHandler = this.upHandler_.bind(this), this.element_.addEventListener("mouseup", this.boundUpHandler), this.element_.addEventListener("mouseleave", this.boundUpHandler), this.element_.addEventListener("touchend", this.boundUpHandler), this.element_.addEventListener("blur", this.boundUpHandler), this.getFrameCount = function () { return this.frameCount_ }, this.setFrameCount = function (a) { this.frameCount_ = a }, this.getRippleElement = function () { return this.rippleElement_ }, this.setRippleXY = function (a, b) { this.x_ = a, this.y_ = b }, this.setRippleStyles = function (b) { if (null !== this.rippleElement_) { var c, d, e, f = "translate(" + this.x_ + "px, " + this.y_ + "px)"; b ? (d = this.Constant_.INITIAL_SCALE, e = this.Constant_.INITIAL_SIZE) : (d = this.Constant_.FINAL_SCALE, e = this.rippleSize_ + "px", a && (f = "translate(" + this.boundWidth / 2 + "px, " + this.boundHeight / 2 + "px)")), c = "translate(-50%, -50%) " + f + d, this.rippleElement_.style.webkitTransform = c, this.rippleElement_.style.msTransform = c, this.rippleElement_.style.transform = c, b ? this.rippleElement_.classList.remove(this.CssClasses_.IS_ANIMATING) : this.rippleElement_.classList.add(this.CssClasses_.IS_ANIMATING) } }, this.animFrameHandler = function () { this.frameCount_-- > 0 ? window.requestAnimationFrame(this.animFrameHandler.bind(this)) : this.setRippleStyles(!1) }) } }, v.prototype.mdlDowngrade_ = function () { this.element_.removeEventListener("mousedown", this.boundDownHandler), this.element_.removeEventListener("touchstart", this.boundDownHandler), this.element_.removeEventListener("mouseup", this.boundUpHandler), this.element_.removeEventListener("mouseleave", this.boundUpHandler), this.element_.removeEventListener("touchend", this.boundUpHandler), this.element_.removeEventListener("blur", this.boundUpHandler) }, a.register({ constructor: v, classAsString: "MaterialRipple", cssClass: "mdl-js-ripple-effect", widget: !1 })}();
